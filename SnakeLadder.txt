// Time Complexity o(n^2) Space Complexity o(n)
class Solution {
    public int snakesAndLadders(int[][] board) {
        if (board==null || board.length==0) return 0;
        int n = board.length;
        int moves[]= new int[n*n];
        int even= 0;
        int idx= 0;

        int i=n-1, j=0;
        while(idx<n*n){
            if(board[i][j]==-1)
                moves[idx]=board[i][j];
            else
                 moves[idx]=board[i][j]-1;
            idx++;

            if(even%2==0){
                j++;
                if(j==n){
                    i--;
                    j--;
                    even++;
                }
            }else{
                j--;
                if(j<0){
                    i--;
                    j++;
                    even++;
                }
            }   
        }

        // BFS traversal
        Queue<Integer> q= new LinkedList();
        q.add(0);
        moves[0]=-2;    //visited
        int result=0;

        while(!q.isEmpty())
        {
            int size=q.size();

            for(int l=0;l<size;l++){
                int curr= q.poll();
                if(curr== n*n -1) return result;

                for(int k=1; k<=6;k++){
                    int child =curr+k;
                    if (child < n*n){
                        if(moves[child]!=-2){
                            if(moves[child]==-1){
                                q.add(child);
                            }
                            else{
                                q.add(moves[child]);
                            }
                            moves[child]=-2;
                        }
                    }
                }
            }
            result++;
        }


    return -1;
    }
}