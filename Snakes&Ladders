class Solution {
public:
    int snakesAndLadders(vector<vector<int>>& board) {
        if(board.size()==0) return 0;
        int n = board.size();
        int even = 0;
        int r = n-1;
        int c = 0;
        vector<int> flat;
        
        while(r>=0){
            if(board[r][c] == -1){
                flat.push_back(-1);
            }
            else{
                flat.push_back(board[r][c]-1);
            }
            
            if(even%2==0){
                //forward
                c++;
                if(c==n){
                    r--;
                    c--;
                    even++;
                }
            }
            else{
                //backword
                c--;
                if(c==-1){
                    r--;
                    c++;
                    even++;
                }
            }
        }
        
        //bfs
        queue<int> q; // q of indexes
        q.push(0);
        flat[0] = -2; // visited
        int lvl = 0;
        while(!q.empty()){
            int size = q.size();
            for(int i = 0; i<size; i++){
                int curr = q.front();
                if(curr == n*n-1) return lvl; //reached end
                q.pop();
                for(int j = 1; j<= 6; j++){
                    int cur = j + curr;
                    if(cur>=flat.size()) break;   // lets case when we are on 34 and we get a 6, so we will skip
                    if(flat[cur] == -1){ // normal
                        flat[cur] = -2;
                        q.push(cur);
                    }
                    else if(flat[cur] != -2){ //snake or ladder
                        q.push(flat[cur]);
                        flat[cur] = -2;
                    }
                }
            }
            lvl++;
        }
        return -1;
    }
};
