//Time complexity: O(row*col)
//Space complexity: O(1)


class Solution {
    
    int dirs[][] = {{-1,0},{1,0},{0,-1},{0,1},{1,1},{-1,1},{1,-1},{-1,-1}};
        
    public char[][] updateBoard(char[][] board, int[] click) {
        int row = click[0];
        int col = click[1];
        
        if(board[row][col]=='M')
        {
            board[row][col] = 'X';
            return board;
        }
        
        dfs(board, row, col);
        
        return board;
    }
    
    private void dfs(char[][] board, int row, int col)
    {
        //base case -> if you encounter the boundaries or a mine/or blank square
        if(row<0 || col<0 || row>=board.length || col >=board[0].length || board[row][col]!= 'E') return;
        int mines = getMines(board,row,col);
        
        if(mines==0)
        {
            board[row][col] = 'B';
            for(int k=0;k<dirs.length;k++)
            {
                int i = dirs[k][0] + row;
                int j = dirs[k][1] + col;
                dfs(board, i , j);
            }
        }
        else
        {
            board[row][col] = (char)(mines + '0');
        }
    }
    
    private int getMines(char[][]board, int row, int col)
    {
        int count =0;
          for(int k=0;k<dirs.length;k++)
            {
                int i = dirs[k][0] + row;
                int j = dirs[k][1] + col;
                if(i<0 || j<0 || i>=board.length || j >=board[0].length) continue;
                if(board[i][j]=='M') count++;
            }
    
        return count;
    }
    
}
