//TimeComplexity.  O(m*n)
//SpaceComplexity. O(m*n)


class Solution {   
     int[][] dirs;
    int m;
    int n;
              
    public char[][] updateBoard(char[][] board, int[] click)
    {
        m = board.length;
        n = board[0].length;
        Queue<Integer> q1 = new LinkedList<>();
        Queue<Integer> q2 = new LinkedList<>();
        
        if(board[click[0]][click[1]] == 'M'){
            board[click[0]][click[1]] = 'X';
            return board;
        }
        q1.add(click[0]);
        q2.add(click[1]);
        board[click[0]][click[1]] = 'B';
              
       dirs = new int[][] {{0,1},{1,0},{0,-1},{-1,0},{1,1},{1,-1},{-1,-1},{-1,1}};
        
        
         while(!q1.isEmpty() && !q2.isEmpty()){
           
           int row = q1.poll();
           int col = q2.poll();
       
        
            int count = countMines(row,col,board);
            if(count == 0){
               
                
                
                for(int[] dir : dirs){
 
                   int i = dir[0] + row;
                   int j = dir[1] + col;
                      
                    if((i >= 0 && i < m) && (j >= 0 && j < n) && board[i][j] == 'E'){
                            q1.add(i);
                            q2.add(j);
                        board[i][j] = 'B';
                    }
                }
           }else{
               board[row][col] = (char)(count + '0');
           }
                        
        }
        return board;
    }
              
    public int countMines(int row , int col, char[][] board){
        int count = 0;
        
        for(int[] dir : dirs){
 
                    int i = dir[0] + row;
                    int j = dir[1] + col;
                      
                    if((i >= 0 && i < m) && (j >= 0 && j < n) && board[i][j] == 'M'){
                           count++;
                    }
                }
        return count;
        
    }
}
